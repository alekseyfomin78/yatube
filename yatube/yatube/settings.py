"""
Django settings for yatube project.

Generated by 'django-admin startproject' using Django 3.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from distutils.util import strtobool
from dotenv import load_dotenv

load_dotenv()  # для загрузки переменных окружения

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# путь к папке с шаблонами
TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = strtobool(os.getenv('DJANGO_DEBUG', 'no'))  # для прода

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "[::1]",
    "testserver",
]

INTERNAL_IPS = [
    '127.0.0.1',
]

# Application definition

INSTALLED_APPS = [
    'posts',  # приложение posts
    'users',  # приложение users
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',  # аутентификация через токен для api запросов
    "debug_toolbar",  # django debug toolbar
    'sorl.thumbnail',  # приложение для работы с графикой
    'rest_framework',
    'django_filters',
    'corsheaders',  # разрешение на обработку api запросов с другого домена
]

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'yatube.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'users.context_processors.context.year',  # определяем в проекте функцию, которая возвращает текущий год
            ],
        },
    },
]

WSGI_APPLICATION = 'yatube.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# определение БД, к которой подключается приложение
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "ru"

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# URL, который будет использоваться для запросов к статическим файлам
STATIC_URL = '/static_files/'

# задаём адрес директории, куда командой *collectstatic* будет собрана вся статика
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# директория для загрузки изображений
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login
LOGIN_URL = "/auth/login/"
# при успешном логине перенаправление на главную страницу
LOGIN_REDIRECT_URL = "index"
# при выходе из системы перенаправление на главную страницу
LOGOUT_REDIRECT_URL = "index"

# подключение модуля для отправки писем на почту (для смены пароля например)
# подключаем движок filebased.EmailBackend - который эмулирует отправку письма на почту,
# на самом деле письмо не отправляется, будет только складываться в указанную директорию
EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
# директория, в которую будут складываться файлы писем
EMAIL_FILE_PATH = os.path.join(BASE_DIR, "sent_emails")

# Идентификатор текущего сайта
SITE_ID = 1

# кэширование (на проде обычно используется БД Redis)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    # пагинация ответа на api запрос
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,  # максимальное кол-во объектов в ответе

    # лимит запросов для авторизованных и неавторизованных пользователей
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '10000/day',  # лимит для UserRateThrottle
        'anon': '1000/day',  # лимит для AnonRateThrottle
    },

    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
}

CORS_ORIGIN_ALLOW_ALL = True  # True - разрешение обрабатывать api запросы, приходящие с любого хоста
CORS_URLS_REGEX = r'^/api/.*$'  # определяет URL'ы, к которым можно обращаться с других хостов

STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static_files/'),)

# логи: записываем в файл и выводим в консоль
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {  # формат лога
        'verbose': {
            'format': '[%(asctime)s: %(levelname)s] %(message)s'
        }
    },
    'handlers': {
        'file_handler': {  # обработчик для записи в файл
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(os.path.abspath(os.path.pardir), 'debug.log'),
            'formatter': 'verbose',

        },
        'stream_handler': {  # обработчик для вывода в консоль
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['file_handler', 'stream_handler'],  # добавляем оба обработчика
            'level': 'INFO',
            'propagate': True,
        },
    },
}
